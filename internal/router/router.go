package router

import (
	"net/http"

	"github.com/ShinoharaHaruna/GoFi/internal/config"
	"github.com/ShinoharaHaruna/GoFi/internal/handlers"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/ShinoharaHaruna/GoFi/cmd/docs" // docs is generated by Swag CLI
)

// SetupRouter 配置并返回一个 Gin 引擎
// SetupRouter configures and returns a Gin engine
func SetupRouter(cfg *config.Config) *gin.Engine {
	r := gin.Default()

	// 将配置注入到上下文中，以便处理程序可以访问
	// Inject the config into the context so handlers can access it
	r.Use(func(c *gin.Context) {
		c.Set("config", cfg)
		c.Next()
	})

	// API 端点
	// API Endpoints
	// 不带 token 的路由（用于 Bearer token 或查询参数）
	// Routes without token in path (for Bearer token or query param)
	r.GET("/health", handlers.HealthCheck)
	r.GET("/uuid", handlers.GenerateUUID)

	// 不带 token 的路由（用于 Bearer token 或查询参数）
	// Routes without token in path (for Bearer token or query param)
	r.POST("/upload", handlers.UploadFile)
	r.POST("/shorten", handlers.CreateShortLink)
	r.DELETE("/shorten/:shortcode", handlers.DisableShortLink)
	r.POST("/shorten/:shortcode/enable", handlers.EnableShortLink)

	// 短链接下载端点（这个不需要 token）
	// Short link download endpoint (this one doesn't need a token itself)
	r.GET("/s/:shortcode", handlers.DownloadFileFromShortLink)

	// Swagger 端点
	// Swagger endpoint
	r.GET("/swagger", func(c *gin.Context) {
		c.Redirect(http.StatusMovedPermanently, "/swagger/index.html")
	})
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// 文件下载路由必须放在最后，以避免路径冲突
	// The file download route must be last to avoid path conflicts
	r.GET("/:filename", handlers.DownloadFile)

	return r
}
